{
	"info": {
		"_postman_id": "2e1258aa-76d5-49d9-a2e1-f7b7b334cee7",
		"name": "WEAre",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37898339"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Create Users 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var names = [",
									"    \"Alice\", \"Vanko\", \"Charlie\", \"Diana\", \"Eve\", \"Frank\", \"Grace\", \"Hank\", ",
									"    \"Ivy\", \"Jack\", \"Armine\", \"Leo\", \"Mona\", \"Nate\", \"Olivia\", \"Paul\", ",
									"    \"Quinn\", \"Rachel\", \"Steve\", \"Tina\", \"Uma\", \"Vince\", \"Wendy\", \"Xander\", ",
									"    \"Yara\", \"Zane\", \"Liam\", \"Noah\", \"Emma\", \"Olivia\", \"Ava\", \"Sophia\"",
									"];",
									"",
									"var randomIndex = Math.floor(Math.random() * names.length);",
									"",
									"var randomName = names[randomIndex];",
									"",
									"pm.environment.set(\"randomName\", randomName);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"var responseBody = pm.response.text();",
									"",
									"var idMatch = responseBody.match(/id (\\d+)/);",
									"if (idMatch) {",
									"    var userId = idMatch[1]; ",
									"",
									"    pm.environment.set(\"userId\", userId);",
									"",
									"}",
									"",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"User with name\");",
									"});",
									"",
									"var responseBody = pm.response.text();",
									"var idMatch = responseBody.match(/id (\\d+)/);",
									"if (idMatch) {",
									"    var userId = idMatch[1];",
									"    pm.environment.set(\"userId\", userId);",
									"    pm.test(\"User ID is extracted and saved as environment variable\", function () {",
									"        pm.expect(userId).to.not.be.undefined;",
									"    });",
									"}",
									"",
									"pm.test(\"Response format is as expected\", function () {",
									"    var regex = /^User with name \\w+ and id \\d+ was created$/;",
									"    pm.expect(responseBody).to.match(regex);",
									"});",
									"",
									"pm.test(\"Response contains the correct username\", function () {",
									"    var expectedUsername = pm.variables.replaceIn(\"{{randomName}}\");",
									"    pm.expect(pm.response.text()).to.include(`User with name ${expectedUsername}`);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-length": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Length",
								"value": "195",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{randomName}}\",\n  \"password\": \"VankoVelchev#\",\n  \"confirmPassword\": \"VankoVelchev#\",\n  \"email\": \"ivan.velchev@abv.bg\",\n  \"category\": { \"id\": 157 },\n  \"authorities\": [\"ROLE_USER\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base WEAre Url}}/api/users/",
							"host": [
								"{{Base WEAre Url}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Log",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{randomName}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "VankoVelchev#",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{Base WEAre Url}}/authenticate",
							"host": [
								"{{Base WEAre Url}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "LogIn User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var cookie = pm.cookies.get(\"JSESSIONID\");",
									"pm.globals.set(\"JSESSIONID\", cookie);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is HTML\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
									"});",
									"",
									"pm.test(\"Verify 'LOGOUT' button is present for logged-in user\", function () {",
									"    pm.response.to.have.status(200); ",
									"    pm.expect(pm.response.text()).to.include('LOGOUT'); ",
									"});",
									"",
									"pm.test(\"Verify 'Add New Post' button is present for logged-in user\", function () {",
									"    var responseBody = pm.response.text();",
									"    var regex = /<a\\s+href=\"\\/posts\\/auth\\/newPost\"[^>]*>.*?Add New\\s*post<\\/a>/i;",
									"    pm.expect(responseBody).to.match(regex);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{randomName}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "VankoVelchev#",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{Base WEAre Url}}/authenticate",
							"host": [
								"{{Base WEAre Url}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Get] All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"Each user has required properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(function (user) {",
									"        pm.expect(user).to.have.property(\"userId\").that.is.a(\"number\");",
									"        pm.expect(user).to.have.property(\"username\").that.is.a(\"string\");",
									"        pm.expect(user.expertiseProfile).to.have.property(\"id\").that.is.a(\"number\");",
									"        pm.expect(user.expertiseProfile).to.have.property(\"skills\").that.is.an(\"array\");",
									"        pm.expect(user.expertiseProfile).to.have.property(\"category\").that.is.an(\"object\");",
									"        pm.expect(user.expertiseProfile.category).to.have.property(\"id\").that.is.a(\"number\");",
									"        pm.expect(user.expertiseProfile.category).to.have.property(\"name\").that.is.a(\"string\");",
									"       ",
									"    });",
									"});",
									"",
									"pm.test(\"All users are enabled\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(function (user) {",
									"        pm.expect(user.enabled).to.be.true;",
									"    });",
									"});",
									"",
									"pm.test(\"Usernames are non-empty strings\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(function (user) {",
									"        pm.expect(user.username).to.be.a(\"string\").and.not.be.empty;",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"index\": 0,\n  \"size\": 10,\n  \"searchParam1\": \"\",\n  \"searchParam2\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base WEAre Url}}/api/users",
							"host": [
								"{{Base WEAre Url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit User 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var firstNames = [",
									"    \"Arthur\", \"Blake\", \"Cody\", \"Damian\", \"Elliot\", \"Felix\", \"Gavin\", \"Harvey\",",
									"    \"Ian\", \"Jasper\", \"Vanko\", \"Lance\", \"Marshall\", \"Nolan\", \"Orson\", \"Preston\",",
									"    \"Quentin\", \"Armine\", \"Sawyer\", \"Tanner\", \"Ulysses\", \"Vaughn\", \"Wesley\", \"Xander\",",
									"    \"Yosef\", \"Zeke\", \"Anderson\", \"Bryce\", \"Clayton\", \"Derek\"",
									"];",
									"",
									"var lastNames = [",
									"    \"Armstrong\", \"Bennett\", \"Carter\", \"Dixon\", \"Ellison\", \"Fletcher\", \"Grant\", ",
									"    \"Hawkins\", \"Ingram\", \"Jefferson\", \"Keller\", \"Lambert\", \"McCarthy\", \"Nelson\",",
									"    \"O'Connor\", \"Patterson\", \"Quigley\", \"Reynolds\", \"Sullivan\", \"Turner\",",
									"    \"Underwood\", \"Vinson\", \"Waters\", \"Xiong\", \"Velchev\", \"Zimmerman\",",
									"    \"Adler\", \"Barron\", \"Carson\", \"Stoykova\"",
									"];",
									"",
									"var randomFirstIndex = Math.floor(Math.random() * firstNames.length);",
									"var randomLastIndex = Math.floor(Math.random() * lastNames.length);",
									"",
									"var randomFirstName = firstNames[randomFirstIndex];",
									"var randomLastName = lastNames[randomLastIndex];",
									"",
									"pm.environment.set(\"firstName\", randomFirstName);",
									"pm.environment.set(\"lastName\", randomLastName);",
									"",
									"console.log(\"Generated First Name: \" + randomFirstName);",
									"console.log(\"Generated Last Name: \" + randomLastName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Response contains 'id' and it is an integer\", function () {",
									"    pm.expect(responseJson).to.have.property(\"id\");",
									"    pm.expect(Number.isInteger(responseJson.id)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains 'firstName' and it is a string\", function () {",
									"    pm.expect(responseJson).to.have.property(\"firstName\");",
									"    pm.expect(responseJson.firstName).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Response contains 'lastName' and it is a string\", function () {",
									"    pm.expect(responseJson).to.have.property(\"lastName\");",
									"    pm.expect(responseJson.lastName).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Response contains 'sex' and it is a string\", function () {",
									"    pm.expect(responseJson).to.have.property(\"sex\");",
									"    pm.expect(responseJson.sex).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Response contains 'birthYear' and it is a string\", function () {",
									"    pm.expect(responseJson).to.have.property(\"birthYear\");",
									"    pm.expect(responseJson.birthYear).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Response contains 'picturePrivacy' and it is a boolean\", function () {",
									"    pm.expect(responseJson).to.have.property(\"picturePrivacy\");",
									"    pm.expect(responseJson.picturePrivacy).to.be.a(\"boolean\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "JSESSIONID={{JSESSIONID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{userId}},  \n  \"firstName\": \"{{firstName}}\",\n  \"lastName\": \"{{lastName}}\",\n  \"sex\": \"MALE\",  \n\"birthYear\": \"1876-01-01\",\n  \"personalReview\": \"\",\n  \"picture\": \"\",  \n  \"location\": {}  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base WEAre Url}}/api/users/auth/{{userId}}/personal/",
							"host": [
								"{{Base WEAre Url}}"
							],
							"path": [
								"api",
								"users",
								"auth",
								"{{userId}}",
								"personal",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create public post User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response is HTML\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
									"});",
									"",
									"const cheerio = require('cheerio');",
									"",
									"const $ = cheerio.load(pm.response.text());",
									"",
									"",
									"pm.test(\"Post is marked as public\", function () {",
									"    const isPublic = $('.position').first().text().includes(\"Public post: true\");",
									"    pm.expect(isPublic).to.be.true;",
									"});",
									"",
									"pm.test(\"Like button is present\", function () {",
									"    const likeButton = $('input.fa-heart').length;",
									"    pm.expect(likeButton).to.be.above(0); ",
									"});",
									"",
									"const postTitle = pm.environment.get(\"postTitle\"); ",
									"",
									"pm.test(`Response contains '${postTitle}'`, function () {",
									"    pm.expect(pm.response.text()).to.include(postTitle);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "JSESSIONID={{JSESSIONID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "imagefile",
									"type": "file",
									"src": "postman-cloud:///1ef9a0e2-de7f-4290-8575-1db07066a114"
								}
							]
						},
						"url": {
							"raw": "{{Base WEAre Url}}/posts/auth/newPost?content={{postTitle}}&name={{randomName}}&public=true",
							"host": [
								"{{Base WEAre Url}}"
							],
							"path": [
								"posts",
								"auth",
								"newPost"
							],
							"query": [
								{
									"key": "content",
									"value": "{{postTitle}}"
								},
								{
									"key": "name",
									"value": "{{randomName}}"
								},
								{
									"key": "public",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create privet post User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response is HTML\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
									"});",
									"",
									"const cheerio = require('cheerio');",
									"",
									"const $ = cheerio.load(pm.response.text());",
									"",
									"",
									"pm.test(\"Post is marked as false\", function () {",
									"    const isPublic = $('.position').first().text().includes(\"Public post: false\");",
									"    pm.expect(isPublic).to.be.true;",
									"});",
									"",
									"pm.test(\"Like button is present\", function () {",
									"    const likeButton = $('input.fa-heart').length;",
									"    pm.expect(likeButton).to.be.above(0); ",
									"});",
									"",
									"const postTitle2 = pm.environment.get(\"postTitle2\"); ",
									"",
									"pm.test(`Response contains '${postTitle2}'`, function () {",
									"    pm.expect(pm.response.text()).to.include(postTitle2);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "JSESSIONID={{JSESSIONID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "imagefile",
									"type": "file",
									"src": "postman-cloud:///1ef9a0e2-de7f-4290-8575-1db07066a114"
								}
							]
						},
						"url": {
							"raw": "{{Base WEAre Url}}/posts/auth/newPost?content={{postTitle2}}&name={{randomName}}&public=false",
							"host": [
								"{{Base WEAre Url}}"
							],
							"path": [
								"posts",
								"auth",
								"newPost"
							],
							"query": [
								{
									"key": "content",
									"value": "{{postTitle2}}"
								},
								{
									"key": "name",
									"value": "{{randomName}}"
								},
								{
									"key": "public",
									"value": "false"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Request",
			"item": [
				{
					"name": "Create Users 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var names = [",
									"    \"Benjamin\", \"Catherine\", \"Daniel\", \"Ella\", \"Finn\", \"Georgia\", \"Henry\", \"Isla\",",
									"    \"Jacob\", \"Kylie\", \"Lucas\", \"Mason\", \"Nora\", \"Owen\", \"Penelope\", \"Quincy\",",
									"    \"Riley\", \"Sophie\", \"Thomas\", \"Ursula\", \"Victor\", \"Willow\", \"Xenia\", \"Yusuf\",",
									"    \"Zara\", \"Aiden\", \"Bella\", \"Caleb\", \"Delilah\", \"Ethan\"",
									"];",
									"",
									"var randomIndex = Math.floor(Math.random() * names.length);",
									"",
									"var randomName = names[randomIndex];",
									"",
									"pm.environment.set(\"randomName2\", randomName);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var responseBody = pm.response.text();",
									"",
									"var idMatch = responseBody.match(/id (\\d+)/);",
									"if (idMatch) {",
									"    var userId = idMatch[1]; ",
									"",
									"    pm.environment.set(\"userId2\", userId);",
									"",
									"}",
									"",
									"pm.test(\"Response contains success message\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"User with name\");",
									"});",
									"",
									"pm.test(\"Response format is as expected\", function () {",
									"    var regex = /^User with name \\w+ and id \\d+ was created$/;",
									"    pm.expect(responseBody).to.match(regex);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-length": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Length",
								"value": "195",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{randomName2}}\",\n  \"password\": \"VankoVelchev#\",\n  \"confirmPassword\": \"VankoVelchev#\",\n  \"email\": \"ivan.velchev@abv.bg\",\n  \"category\": { \"id\": 148 },\n  \"authorities\": [\"ROLE_USER\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base WEAre Url}}/api/users/",
							"host": [
								"{{Base WEAre Url}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.request.body.raw.includes('\"id\"')) {",
									"    throw new Error(\"Error,ID field\");",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{randomName}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "VankoVelchev#",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "JSESSIONID={{JSESSIONID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{userId2}},\n  \"username\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base WEAre Url}}/api/auth/request?name={{userId}}",
							"host": [
								"{{Base WEAre Url}}"
							],
							"path": [
								"api",
								"auth",
								"request"
							],
							"query": [
								{
									"key": "name",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "send request User 1 to User2 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseText = pm.response.text();",
									"",
									"pm.test(\"Response contains the expected friend request format\", function () {",
									"    pm.expect(responseText).to.include(\"send friend request to\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.request.body.raw.includes('\"id\"')) {",
									"    throw new Error(\"Error,ID field\");",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{randomName}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "VankoVelchev#",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "JSESSIONID={{JSESSIONID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{userId2}},\n  \"username\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base WEAre Url}}/api/auth/request?name={{userId}}",
							"host": [
								"{{Base WEAre Url}}"
							],
							"path": [
								"api",
								"auth",
								"request"
							],
							"query": [
								{
									"key": "name",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Log",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{randomName2}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "VankoVelchev#",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{Base WEAre Url}}/authenticate",
							"host": [
								"{{Base WEAre Url}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "LogIn User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var cookieUser2 = pm.cookies.get(\"JSESSIONID\");",
									"",
									"pm.globals.set(\"JSESSIONID_USER2\", cookieUser2);",
									"",
									"console.log(\"JSESSIONID for User 2: \" + cookieUser2);",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is HTML\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
									"});",
									"",
									"pm.test(\"Verify 'LOGOUT' button is present for logged-in user\", function () {",
									"    pm.response.to.have.status(200); ",
									"    pm.expect(pm.response.text()).to.include('LOGOUT'); ",
									"});",
									"",
									"pm.test(\"Verify 'Add New Post' button is present for logged-in user\", function () {",
									"    var responseBody = pm.response.text();",
									"    var regex = /<a\\s+href=\"\\/posts\\/auth\\/newPost\"[^>]*>.*?Add New\\s*post<\\/a>/i;",
									"    pm.expect(responseBody).to.match(regex);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{randomName2}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "VankoVelchev#",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{Base WEAre Url}}/authenticate",
							"host": [
								"{{Base WEAre Url}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get request User2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var responseData = pm.response.json();",
									"",
									"if (Array.isArray(responseData) && responseData.length > 0) {",
									"    var requestId = responseData[0].id; ",
									"",
									"    pm.environment.set(\"requestId\", requestId);",
									"",
									"    console.log(\"Saved Request ID: \" + requestId);",
									"} else {",
									"    console.log(\"Error\");",
									"}",
									"",
									"pm.test(\"Response array is not empty\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData.length).to.be.above(0, \"Expected response array to have at least one entry\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Base WEAre Url}}/api/auth/users/{{userId2}}/request/",
							"host": [
								"{{Base WEAre Url}}"
							],
							"path": [
								"api",
								"auth",
								"users",
								"{{userId2}}",
								"request",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "approve request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseText = pm.response.text();",
									"",
									"pm.test(\"Response contains the expected friend request format\", function () {",
									"    pm.expect(responseText).to.include(\"approved request of\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Cookie-2",
								"value": "JSESSIONID2={{JSESSIONID_USER2}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{Base WEAre Url}}/api/auth/users/{{userId2}}/request/approve?requestId={{requestId}}",
							"host": [
								"{{Base WEAre Url}}"
							],
							"path": [
								"api",
								"auth",
								"users",
								"{{userId2}}",
								"request",
								"approve"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "requestId",
									"value": "{{requestId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Post",
			"item": [
				{
					"name": "Create post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response is HTML\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
									"});",
									"",
									"const cheerio = require('cheerio');",
									"",
									"const $ = cheerio.load(pm.response.text());",
									"",
									"",
									"pm.test(\"Post is marked as public\", function () {",
									"    const isPublic = $('.position').first().text().includes(\"Public post: true\");",
									"    pm.expect(isPublic).to.be.true;",
									"});",
									"",
									"pm.test(\"Like button is present\", function () {",
									"    const likeButton = $('input.fa-heart').length;",
									"    pm.expect(likeButton).to.be.above(0); ",
									"});",
									"",
									"const postTitle3 = pm.environment.get(\"postTitle3\"); ",
									"",
									"pm.test(`Response contains '${postTitle3}'`, function () {",
									"    pm.expect(pm.response.text()).to.include(postTitle3);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie-2",
								"value": "JSESSIONID2={{JSESSIONID_USER2}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "imagefile",
									"type": "file",
									"src": "postman-cloud:///1ef9a0e2-de7f-4290-8575-1db07066a114"
								}
							]
						},
						"url": {
							"raw": "{{Base WEAre Url}}/posts/auth/newPost?content={{postTitle3}}&name={{randomName2}}&public=true",
							"host": [
								"{{Base WEAre Url}}"
							],
							"path": [
								"posts",
								"auth",
								"newPost"
							],
							"query": [
								{
									"key": "content",
									"value": "{{postTitle3}}"
								},
								{
									"key": "name",
									"value": "{{randomName2}}"
								},
								{
									"key": "public",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Show All Posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"var responseData = pm.response.json();",
									"",
									"if (Array.isArray(responseData) && responseData.length > 0) {",
									"    var postId = responseData[1].postId; ",
									"",
									"    pm.environment.set(\"postId\", postId);",
									"",
									"",
									"var postIdUser2 = responseData[0].postId;",
									"    pm.environment.set(\"postIdUser2\", postIdUser2);",
									"    console.log(\"Saved Post ID for User 2: \" + postIdUser2);",
									"} else {",
									"    console.log(\"Not enough posts found or the response is not a valid array.\");",
									"}",
									"",
									"",
									"var firstPost = responseData[0];",
									"",
									"",
									"pm.test(\"Response contains 'postId'\", function () {",
									"    pm.expect(firstPost).to.have.property(\"postId\");",
									"});",
									"",
									"pm.test(\"Response contains 'content'\", function () {",
									"    pm.expect(firstPost).to.have.property(\"content\");",
									"});",
									"",
									"pm.test(\"Response contains 'picture'\", function () {",
									"    pm.expect(firstPost).to.have.property(\"picture\");",
									"});",
									"",
									"pm.test(\"Response contains 'date'\", function () {",
									"    pm.expect(firstPost).to.have.property(\"date\");",
									"});",
									"",
									"pm.test(\"Response contains 'likes'\", function () {",
									"    pm.expect(firstPost).to.have.property(\"likes\");",
									"});",
									"",
									"pm.test(\"postId is an integer\", function () {",
									"    pm.expect(firstPost).to.have.property(\"postId\");",
									"    pm.expect(firstPost.postId % 1 === 0).to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"content-length": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Length",
								"value": "0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base WEAre Url}}/api/post/",
							"host": [
								"{{Base WEAre Url}}"
							],
							"path": [
								"api",
								"post",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Like Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Response contains 'postId'\", function () {",
									"    pm.expect(responseJson).to.have.property(\"postId\");",
									"});",
									"",
									"pm.test(\"Response contains 'content'\", function () {",
									"    pm.expect(responseJson).to.have.property(\"content\");",
									"});",
									"",
									"pm.test(\"Response contains 'picture'\", function () {",
									"    pm.expect(responseJson).to.have.property(\"picture\");",
									"});",
									"",
									"pm.test(\"Response contains 'date'\", function () {",
									"    pm.expect(responseJson).to.have.property(\"date\");",
									"});",
									"",
									"pm.test(\"Response contains 'likes'\", function () {",
									"    pm.expect(responseJson).to.have.property(\"likes\");",
									"});",
									"",
									"pm.test(\"postId is an integer\", function () {",
									"    pm.expect(responseJson).to.have.property(\"postId\");",
									"    pm.expect(responseJson.postId % 1 === 0).to.be.true;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie-2",
								"value": "JSESSIONID2={{JSESSIONID_USER2}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "postId",
									"value": "{{postId}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{Base WEAre Url}}/api/post/auth/likesUp",
							"host": [
								"{{Base WEAre Url}}"
							],
							"path": [
								"api",
								"post",
								"auth",
								"likesUp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment post from User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();",
									"pm.environment.set(\"commentId\", responseData.commentId);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"commentId is an integer\", function () {",
									"    pm.expect(responseJson).to.have.property(\"commentId\");",
									"    pm.expect(responseJson.commentId % 1 === 0).to.be.true;",
									"});",
									"",
									"pm.test(\"content is a string\", function () {",
									"    pm.expect(responseJson).to.have.property(\"content\");",
									"    pm.expect(responseJson.content).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"likes is an array\", function () {",
									"    pm.expect(responseJson).to.have.property(\"likes\");",
									"    pm.expect(responseJson.likes).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"date is a string\", function () {",
									"    pm.expect(responseJson).to.have.property(\"date\");",
									"    pm.expect(responseJson.date).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"liked is a boolean\", function () {",
									"    pm.expect(responseJson).to.have.property(\"liked\");",
									"    pm.expect(responseJson.liked).to.be.a(\"boolean\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"commentId\": \"\",\n  \"postId\": {{postId}},\n  \"userId\": {{userId2}},\n  \"content\": \"demo 1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base WEAre Url}}/api/comment/auth/creator",
							"host": [
								"{{Base WEAre Url}}"
							],
							"path": [
								"api",
								"comment",
								"auth",
								"creator"
							]
						}
					},
					"response": []
				},
				{
					"name": "LogIn User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{randomName}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "VankoVelchev#",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{Base WEAre Url}}/authenticate",
							"host": [
								"{{Base WEAre Url}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "LogIn User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var cookie = pm.cookies.get(\"JSESSIONID\");",
									"pm.globals.set(\"JSESSIONID\", cookie);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is HTML\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
									"});",
									"",
									"pm.test(\"Verify 'LOGOUT' button is present for logged-in user\", function () {",
									"    pm.response.to.have.status(200); ",
									"    pm.expect(pm.response.text()).to.include('LOGOUT'); ",
									"});",
									"",
									"pm.test(\"Verify 'Add New Post' button is present for logged-in user\", function () {",
									"    var responseBody = pm.response.text();",
									"    var regex = /<a\\s+href=\"\\/posts\\/auth\\/newPost\"[^>]*>.*?Add New\\s*post<\\/a>/i;",
									"    pm.expect(responseBody).to.match(regex);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{randomName}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "VankoVelchev#",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{Base WEAre Url}}/authenticate",
							"host": [
								"{{Base WEAre Url}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Like Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"commentId is an integer\", function () {",
									"    pm.expect(responseJson).to.have.property(\"commentId\");",
									"    pm.expect(responseJson.commentId % 1 === 0).to.be.true;",
									"});",
									"",
									"pm.test(\"content is a string\", function () {",
									"    pm.expect(responseJson).to.have.property(\"content\");",
									"    pm.expect(responseJson.content).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"likes is an array\", function () {",
									"    pm.expect(responseJson).to.have.property(\"likes\");",
									"    pm.expect(responseJson.likes).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"date is a string\", function () {",
									"    pm.expect(responseJson).to.have.property(\"date\");",
									"    pm.expect(responseJson.date).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"liked is a boolean\", function () {",
									"    pm.expect(responseJson).to.have.property(\"liked\");",
									"    pm.expect(responseJson.liked).to.be.a(\"boolean\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "JSESSIONID={{JSESSIONID}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{Base WEAre Url}}/api/comment/auth/likesUp?commentId={{commentId}}",
							"host": [
								"{{Base WEAre Url}}"
							],
							"path": [
								"api",
								"comment",
								"auth",
								"likesUp"
							],
							"query": [
								{
									"key": "commentId",
									"value": "{{commentId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleate Post User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "JSESSIONID={{JSESSIONID}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{Base WEAre Url}}/api/post/auth/manager?postId={{postId}}",
							"host": [
								"{{Base WEAre Url}}"
							],
							"path": [
								"api",
								"post",
								"auth",
								"manager"
							],
							"query": [
								{
									"key": "postId",
									"value": "{{postId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete",
			"item": [
				{
					"name": "Log",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{randomName2}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "VankoVelchev#",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{Base WEAre Url}}/authenticate",
							"host": [
								"{{Base WEAre Url}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "LogIn User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var cookieUser2 = pm.cookies.get(\"JSESSIONID\");",
									"",
									"pm.globals.set(\"JSESSIONID_USER2\", cookieUser2);",
									"",
									"console.log(\"JSESSIONID for User 2: \" + cookieUser2);",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is HTML\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
									"});",
									"",
									"pm.test(\"Verify 'LOGOUT' button is present for logged-in user\", function () {",
									"    pm.response.to.have.status(200); ",
									"    pm.expect(pm.response.text()).to.include('LOGOUT'); ",
									"});",
									"",
									"pm.test(\"Verify 'Add New Post' button is present for logged-in user\", function () {",
									"    var responseBody = pm.response.text();",
									"    var regex = /<a\\s+href=\"\\/posts\\/auth\\/newPost\"[^>]*>.*?Add New\\s*post<\\/a>/i;",
									"    pm.expect(responseBody).to.match(regex);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{randomName2}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "VankoVelchev#",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{Base WEAre Url}}/authenticate",
							"host": [
								"{{Base WEAre Url}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleate Post User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie-2",
								"value": "JSESSIONID2={{JSESSIONID_USER2}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{Base WEAre Url}}/api/post/auth/manager?postId={{postIdUser2}}",
							"host": [
								"{{Base WEAre Url}}"
							],
							"path": [
								"api",
								"post",
								"auth",
								"manager"
							],
							"query": [
								{
									"key": "postId",
									"value": "{{postIdUser2}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}